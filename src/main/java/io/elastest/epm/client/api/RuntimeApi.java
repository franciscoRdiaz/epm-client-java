/*
 * EPM REST API
 * REST API description of the ElasTest Platform Manager Module.
 *
 * OpenAPI spec version: 0.1.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.elastest.epm.client.api;

import com.google.gson.reflect.TypeToken;
import io.elastest.epm.client.*;
import io.elastest.epm.client.model.CommandExecutionBody;
import io.elastest.epm.client.model.FileDownloadBody;
import io.elastest.epm.client.model.FileUploadBody;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RuntimeApi {
  private ApiClient apiClient;

  public RuntimeApi() {
    this(Configuration.getDefaultApiClient());
  }

  public RuntimeApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /* Build call for downloadFileFromInstance */
  private com.squareup.okhttp.Call downloadFileFromInstanceCall(
      String id,
      FileDownloadBody fileDownloadBody,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = fileDownloadBody;

    // create path and map variables
    String localVarPath =
        "/runtime/{id}/file"
            .replaceAll("\\{format\\}", "json")
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"multipart/form-data"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call downloadFileFromInstanceValidateBeforeCall(
      String id,
      FileDownloadBody fileDownloadBody,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(
          "Missing the required parameter 'id' when calling downloadFileFromInstance(Async)");
    }

    // verify the required parameter 'fileDownloadBody' is set
    if (fileDownloadBody == null) {
      throw new ApiException(
          "Missing the required parameter 'fileDownloadBody' when calling downloadFileFromInstance(Async)");
    }

    com.squareup.okhttp.Call call =
        downloadFileFromInstanceCall(
            id, fileDownloadBody, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Downloads a file from a VDU. Download a file with the given filepath from the given VDU.
   *
   * @param id ID of VDU (required)
   * @param fileDownloadBody Contains details of the file to be downloaded from the given Instance
   *     (required)
   * @return File
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public File downloadFileFromInstance(String id, FileDownloadBody fileDownloadBody)
      throws ApiException {
    ApiResponse<File> resp = downloadFileFromInstanceWithHttpInfo(id, fileDownloadBody);
    return resp.getData();
  }

  /**
   * Downloads a file from a VDU. Download a file with the given filepath from the given VDU.
   *
   * @param id ID of VDU (required)
   * @param fileDownloadBody Contains details of the file to be downloaded from the given Instance
   *     (required)
   * @return ApiResponse&lt;File&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<File> downloadFileFromInstanceWithHttpInfo(
      String id, FileDownloadBody fileDownloadBody) throws ApiException {
    com.squareup.okhttp.Call call =
        downloadFileFromInstanceValidateBeforeCall(id, fileDownloadBody, null, null);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Downloads a file from a VDU. (asynchronously) Download a file with the given filepath from the
   * given VDU.
   *
   * @param id ID of VDU (required)
   * @param fileDownloadBody Contains details of the file to be downloaded from the given Instance
   *     (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call downloadFileFromInstanceAsync(
      String id, FileDownloadBody fileDownloadBody, final ApiCallback<File> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        downloadFileFromInstanceValidateBeforeCall(
            id, fileDownloadBody, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<File>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /* Build call for executeOnInstance */
  private com.squareup.okhttp.Call executeOnInstanceCall(
      String id,
      CommandExecutionBody commandExecutionBody,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = commandExecutionBody;

    // create path and map variables
    String localVarPath =
        "/runtime/{id}/action/execute"
            .replaceAll("\\{format\\}", "json")
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call executeOnInstanceValidateBeforeCall(
      String id,
      CommandExecutionBody commandExecutionBody,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(
          "Missing the required parameter 'id' when calling executeOnInstance(Async)");
    }

    // verify the required parameter 'commandExecutionBody' is set
    if (commandExecutionBody == null) {
      throw new ApiException(
          "Missing the required parameter 'commandExecutionBody' when calling executeOnInstance(Async)");
    }

    com.squareup.okhttp.Call call =
        executeOnInstanceCall(id, commandExecutionBody, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Executes given command on the given VDU. Executes the given command on the VDU with the given
   * ID.
   *
   * @param id ID of VDU (required)
   * @param commandExecutionBody Contains command to be executed and a flag if for the completion of
   *     the execution should be awaited (required)
   * @return String
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public String executeOnInstance(String id, CommandExecutionBody commandExecutionBody)
      throws ApiException {
    ApiResponse<String> resp = executeOnInstanceWithHttpInfo(id, commandExecutionBody);
    return resp.getData();
  }

  /**
   * Executes given command on the given VDU. Executes the given command on the VDU with the given
   * ID.
   *
   * @param id ID of VDU (required)
   * @param commandExecutionBody Contains command to be executed and a flag if for the completion of
   *     the execution should be awaited (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<String> executeOnInstanceWithHttpInfo(
      String id, CommandExecutionBody commandExecutionBody) throws ApiException {
    com.squareup.okhttp.Call call =
        executeOnInstanceValidateBeforeCall(id, commandExecutionBody, null, null);
    Type localVarReturnType = new TypeToken<String>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Executes given command on the given VDU. (asynchronously) Executes the given command on the VDU
   * with the given ID.
   *
   * @param id ID of VDU (required)
   * @param commandExecutionBody Contains command to be executed and a flag if for the completion of
   *     the execution should be awaited (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call executeOnInstanceAsync(
      String id, CommandExecutionBody commandExecutionBody, final ApiCallback<String> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        executeOnInstanceValidateBeforeCall(
            id, commandExecutionBody, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<String>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /* Build call for startInstance */
  private com.squareup.okhttp.Call startInstanceCall(
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/runtime/{id}/action/start"
            .replaceAll("\\{format\\}", "json")
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {};

    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call startInstanceValidateBeforeCall(
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(
          "Missing the required parameter 'id' when calling startInstance(Async)");
    }

    com.squareup.okhttp.Call call =
        startInstanceCall(id, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Starts the given VDU. Starts the VDU with the given ID.
   *
   * @param id ID of VDU (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public void startInstance(String id) throws ApiException {
    startInstanceWithHttpInfo(id);
  }

  /**
   * Starts the given VDU. Starts the VDU with the given ID.
   *
   * @param id ID of VDU (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<Void> startInstanceWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = startInstanceValidateBeforeCall(id, null, null);
    return apiClient.execute(call);
  }

  /**
   * Starts the given VDU. (asynchronously) Starts the VDU with the given ID.
   *
   * @param id ID of VDU (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call startInstanceAsync(String id, final ApiCallback<Void> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        startInstanceValidateBeforeCall(id, progressListener, progressRequestListener);
    apiClient.executeAsync(call, callback);
    return call;
  }
  /* Build call for stopInstance */
  private com.squareup.okhttp.Call stopInstanceCall(
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/runtime/{id}/action/stop"
            .replaceAll("\\{format\\}", "json")
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {};

    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "PUT",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call stopInstanceValidateBeforeCall(
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(
          "Missing the required parameter 'id' when calling stopInstance(Async)");
    }

    com.squareup.okhttp.Call call = stopInstanceCall(id, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Stops the given VDU. Stops the VDU with the given ID.
   *
   * @param id ID of VDU (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public void stopInstance(String id) throws ApiException {
    stopInstanceWithHttpInfo(id);
  }

  /**
   * Stops the given VDU. Stops the VDU with the given ID.
   *
   * @param id ID of VDU (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<Void> stopInstanceWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = stopInstanceValidateBeforeCall(id, null, null);
    return apiClient.execute(call);
  }

  /**
   * Stops the given VDU. (asynchronously) Stops the VDU with the given ID.
   *
   * @param id ID of VDU (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call stopInstanceAsync(String id, final ApiCallback<Void> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        stopInstanceValidateBeforeCall(id, progressListener, progressRequestListener);
    apiClient.executeAsync(call, callback);
    return call;
  }
  /* Build call for uploadFileToInstanceByFile */
  private com.squareup.okhttp.Call uploadFileToInstanceByFileCall(
      String id,
      String remotePath,
      File file,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/runtime/{id}/file"
            .replaceAll("\\{format\\}", "json")
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    if (remotePath != null) localVarFormParams.put("remotePath", remotePath);
    if (file != null) localVarFormParams.put("file", file);

    final String[] localVarAccepts = {};

    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"multipart/form-data"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call uploadFileToInstanceByFileValidateBeforeCall(
      String id,
      String remotePath,
      File file,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(
          "Missing the required parameter 'id' when calling uploadFileToInstanceByFile(Async)");
    }

    // verify the required parameter 'remotePath' is set
    if (remotePath == null) {
      throw new ApiException(
          "Missing the required parameter 'remotePath' when calling uploadFileToInstanceByFile(Async)");
    }

    // verify the required parameter 'file' is set
    if (file == null) {
      throw new ApiException(
          "Missing the required parameter 'file' when calling uploadFileToInstanceByFile(Async)");
    }

    com.squareup.okhttp.Call call =
        uploadFileToInstanceByFileCall(
            id, remotePath, file, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Uploads a file to a VDU. Uploads a given file to the given filepath to the given VDU.
   *
   * @param id ID of VDU (required)
   * @param remotePath Absolute path where the file should go on the Instance (required)
   * @param file File which has to be uploaded to the Instance. Either this or the hostPath but not
   *     both can be provided. (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public void uploadFileToInstanceByFile(String id, String remotePath, File file)
      throws ApiException {
    uploadFileToInstanceByFileWithHttpInfo(id, remotePath, file);
  }

  /**
   * Uploads a file to a VDU. Uploads a given file to the given filepath to the given VDU.
   *
   * @param id ID of VDU (required)
   * @param remotePath Absolute path where the file should go on the Instance (required)
   * @param file File which has to be uploaded to the Instance. Either this or the hostPath but not
   *     both can be provided. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<Void> uploadFileToInstanceByFileWithHttpInfo(
      String id, String remotePath, File file) throws ApiException {
    com.squareup.okhttp.Call call =
        uploadFileToInstanceByFileValidateBeforeCall(id, remotePath, file, null, null);
    return apiClient.execute(call);
  }

  /**
   * Uploads a file to a VDU. (asynchronously) Uploads a given file to the given filepath to the
   * given VDU.
   *
   * @param id ID of VDU (required)
   * @param remotePath Absolute path where the file should go on the Instance (required)
   * @param file File which has to be uploaded to the Instance. Either this or the hostPath but not
   *     both can be provided. (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call uploadFileToInstanceByFileAsync(
      String id, String remotePath, File file, final ApiCallback<Void> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        uploadFileToInstanceByFileValidateBeforeCall(
            id, remotePath, file, progressListener, progressRequestListener);
    apiClient.executeAsync(call, callback);
    return call;
  }
  /* Build call for uploadFileToInstanceByPath */
  private com.squareup.okhttp.Call uploadFileToInstanceByPathCall(
      String id,
      FileUploadBody fileUploadBody,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = fileUploadBody;

    // create path and map variables
    String localVarPath =
        "/runtime/{id}/path"
            .replaceAll("\\{format\\}", "json")
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {};

    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call uploadFileToInstanceByPathValidateBeforeCall(
      String id,
      FileUploadBody fileUploadBody,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(
          "Missing the required parameter 'id' when calling uploadFileToInstanceByPath(Async)");
    }

    // verify the required parameter 'fileUploadBody' is set
    if (fileUploadBody == null) {
      throw new ApiException(
          "Missing the required parameter 'fileUploadBody' when calling uploadFileToInstanceByPath(Async)");
    }

    com.squareup.okhttp.Call call =
        uploadFileToInstanceByPathCall(
            id, fileUploadBody, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Uploads a file to a VDU. Uploads a given file from the host path to the given file path to the
   * given VDU.
   *
   * @param id ID of VDU (required)
   * @param fileUploadBody Contains details of the file with the given path to upload to the
   *     Instance (required)
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public void uploadFileToInstanceByPath(String id, FileUploadBody fileUploadBody)
      throws ApiException {
    uploadFileToInstanceByPathWithHttpInfo(id, fileUploadBody);
  }

  /**
   * Uploads a file to a VDU. Uploads a given file from the host path to the given file path to the
   * given VDU.
   *
   * @param id ID of VDU (required)
   * @param fileUploadBody Contains details of the file with the given path to upload to the
   *     Instance (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<Void> uploadFileToInstanceByPathWithHttpInfo(
      String id, FileUploadBody fileUploadBody) throws ApiException {
    com.squareup.okhttp.Call call =
        uploadFileToInstanceByPathValidateBeforeCall(id, fileUploadBody, null, null);
    return apiClient.execute(call);
  }

  /**
   * Uploads a file to a VDU. (asynchronously) Uploads a given file from the host path to the given
   * file path to the given VDU.
   *
   * @param id ID of VDU (required)
   * @param fileUploadBody Contains details of the file with the given path to upload to the
   *     Instance (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call uploadFileToInstanceByPathAsync(
      String id, FileUploadBody fileUploadBody, final ApiCallback<Void> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        uploadFileToInstanceByPathValidateBeforeCall(
            id, fileUploadBody, progressListener, progressRequestListener);
    apiClient.executeAsync(call, callback);
    return call;
  }
}
