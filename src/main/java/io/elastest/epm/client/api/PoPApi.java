/*
 * EPM REST API
 * REST API description of the ElasTest Platform Manager Module.
 *
 * OpenAPI spec version: 0.1.2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.elastest.epm.client.api;

import com.google.gson.reflect.TypeToken;
import io.elastest.epm.client.*;
import io.elastest.epm.client.model.PoP;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PoPApi {
  private ApiClient apiClient;

  public PoPApi() {
    this(Configuration.getDefaultApiClient());
  }

  public PoPApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /* Build call for getAllPoPs */
  private com.squareup.okhttp.Call getAllPoPsCall(
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/pop".replaceAll("\\{format\\}", "json");

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getAllPoPsValidateBeforeCall(
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    com.squareup.okhttp.Call call = getAllPoPsCall(progressListener, progressRequestListener);
    return call;
  }

  /**
   * Returns all PoPs. Returns all PoPs with all its details.
   *
   * @return List&lt;PoP&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public List<PoP> getAllPoPs() throws ApiException {
    ApiResponse<List<PoP>> resp = getAllPoPsWithHttpInfo();
    return resp.getData();
  }

  /**
   * Returns all PoPs. Returns all PoPs with all its details.
   *
   * @return ApiResponse&lt;List&lt;PoP&gt;&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<List<PoP>> getAllPoPsWithHttpInfo() throws ApiException {
    com.squareup.okhttp.Call call = getAllPoPsValidateBeforeCall(null, null);
    Type localVarReturnType = new TypeToken<List<PoP>>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Returns all PoPs. (asynchronously) Returns all PoPs with all its details.
   *
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAllPoPsAsync(final ApiCallback<List<PoP>> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        getAllPoPsValidateBeforeCall(progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<List<PoP>>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /* Build call for getPoPById */
  private com.squareup.okhttp.Call getPoPByIdCall(
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/pop/{id}"
            .replaceAll("\\{format\\}", "json")
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getPoPByIdValidateBeforeCall(
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling getPoPById(Async)");
    }

    com.squareup.okhttp.Call call = getPoPByIdCall(id, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Returns a PoP. Returns the PoP with the given ID. Returns all its details.
   *
   * @param id ID of PoP (required)
   * @return PoP
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public PoP getPoPById(String id) throws ApiException {
    ApiResponse<PoP> resp = getPoPByIdWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Returns a PoP. Returns the PoP with the given ID. Returns all its details.
   *
   * @param id ID of PoP (required)
   * @return ApiResponse&lt;PoP&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<PoP> getPoPByIdWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = getPoPByIdValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<PoP>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Returns a PoP. (asynchronously) Returns the PoP with the given ID. Returns all its details.
   *
   * @param id ID of PoP (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getPoPByIdAsync(String id, final ApiCallback<PoP> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        getPoPByIdValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<PoP>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /* Build call for registerPoP */
  private com.squareup.okhttp.Call registerPoPCall(
      PoP body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/pop".replaceAll("\\{format\\}", "json");

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call registerPoPValidateBeforeCall(
      PoP body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException(
          "Missing the required parameter 'body' when calling registerPoP(Async)");
    }

    com.squareup.okhttp.Call call =
        registerPoPCall(body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Registers a new PoP Registers a new Point-of-Presence represented by a PoP
   *
   * @param body Defintion of a PoP which defines a Point-of-Presence used to host resources
   *     (required)
   * @return PoP
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public PoP registerPoP(PoP body) throws ApiException {
    ApiResponse<PoP> resp = registerPoPWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Registers a new PoP Registers a new Point-of-Presence represented by a PoP
   *
   * @param body Defintion of a PoP which defines a Point-of-Presence used to host resources
   *     (required)
   * @return ApiResponse&lt;PoP&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<PoP> registerPoPWithHttpInfo(PoP body) throws ApiException {
    com.squareup.okhttp.Call call = registerPoPValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<PoP>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Registers a new PoP (asynchronously) Registers a new Point-of-Presence represented by a PoP
   *
   * @param body Defintion of a PoP which defines a Point-of-Presence used to host resources
   *     (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call registerPoPAsync(PoP body, final ApiCallback<PoP> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        registerPoPValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<PoP>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for registerWorker
   *
   * @param id ID of PoP (required)
   * @param privateKey The private key for registering the adapters inside the worker (required)
   * @param progressListener Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call registerWorkerCall(
      String id,
      File privateKey,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/pop/{id}".replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();
    if (privateKey != null) localVarFormParams.put("privateKey", privateKey);

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"multipart/form-data"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(
                    com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call registerWorkerValidateBeforeCall(
      String id,
      File privateKey,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(
          "Missing the required parameter 'id' when calling registerWorker(Async)");
    }

    // verify the required parameter 'privateKey' is set
    if (privateKey == null) {
      throw new ApiException(
          "Missing the required parameter 'privateKey' when calling registerWorker(Async)");
    }

    com.squareup.okhttp.Call call =
        registerWorkerCall(id, privateKey, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Starts a worker Provides the private key for executing the commands needed for starting the
   * adapters inside a worker
   *
   * @param id ID of PoP (required)
   * @param privateKey The private key for registering the adapters inside the worker (required)
   * @return PoP
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public PoP registerWorker(String id, File privateKey) throws ApiException {
    ApiResponse<PoP> resp = registerWorkerWithHttpInfo(id, privateKey);
    return resp.getData();
  }

  /**
   * Starts a worker Provides the private key for executing the commands needed for starting the
   * adapters inside a worker
   *
   * @param id ID of PoP (required)
   * @param privateKey The private key for registering the adapters inside the worker (required)
   * @return ApiResponse&lt;PoP&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<PoP> registerWorkerWithHttpInfo(String id, File privateKey)
      throws ApiException {
    com.squareup.okhttp.Call call = registerWorkerValidateBeforeCall(id, privateKey, null, null);
    Type localVarReturnType = new TypeToken<PoP>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Starts a worker (asynchronously) Provides the private key for executing the commands needed for
   * starting the adapters inside a worker
   *
   * @param id ID of PoP (required)
   * @param privateKey The private key for registering the adapters inside the worker (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call registerWorkerAsync(
      String id, File privateKey, final ApiCallback<PoP> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        registerWorkerValidateBeforeCall(id, privateKey, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<PoP>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /* Build call for unregisterPoP */
  private com.squareup.okhttp.Call unregisterPoPCall(
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath =
        "/pop/{id}"
            .replaceAll("\\{format\\}", "json")
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"*/*"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {};

    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "DELETE",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call unregisterPoPValidateBeforeCall(
      String id,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(
          "Missing the required parameter 'id' when calling unregisterPoP(Async)");
    }

    com.squareup.okhttp.Call call =
        unregisterPoPCall(id, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Unregisters a PoP. Unregisters the PoP that matches with a given ID.
   *
   * @param id ID of PoP (required)
   * @return String
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public String unregisterPoP(String id) throws ApiException {
    ApiResponse<String> resp = unregisterPoPWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Unregisters a PoP. Unregisters the PoP that matches with a given ID.
   *
   * @param id ID of PoP (required)
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<String> unregisterPoPWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = unregisterPoPValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<String>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Unregisters a PoP. (asynchronously) Unregisters the PoP that matches with a given ID.
   *
   * @param id ID of PoP (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call unregisterPoPAsync(String id, final ApiCallback<String> callback)
      throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        unregisterPoPValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<String>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
  /* Build call for updatePoP */
  private com.squareup.okhttp.Call updatePoPCall(
      String id,
      PoP body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath =
        "/pop/{id}"
            .replaceAll("\\{format\\}", "json")
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {"application/json"};
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {"application/json"};
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient
          .getHttpClient()
          .networkInterceptors()
          .add(
              new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(Chain chain) throws IOException {
                  com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                  return originalResponse
                      .newBuilder()
                      .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                      .build();
                }
              });
    }

    String[] localVarAuthNames = new String[] {};
    return apiClient.buildCall(
        localVarPath,
        "PATCH",
        localVarQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarFormParams,
        localVarAuthNames,
        progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call updatePoPValidateBeforeCall(
      String id,
      PoP body,
      final ProgressResponseBody.ProgressListener progressListener,
      final ProgressRequestBody.ProgressRequestListener progressRequestListener)
      throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling updatePoP(Async)");
    }

    // verify the required parameter 'body' is set
    if (body == null) {
      throw new ApiException("Missing the required parameter 'body' when calling updatePoP(Async)");
    }

    com.squareup.okhttp.Call call =
        updatePoPCall(id, body, progressListener, progressRequestListener);
    return call;
  }

  /**
   * Updates a PoP. Updates an already registered PoP.
   *
   * @param id ID of PoP (required)
   * @param body PoP object that needs to be updated. (required)
   * @return PoP
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public PoP updatePoP(String id, PoP body) throws ApiException {
    ApiResponse<PoP> resp = updatePoPWithHttpInfo(id, body);
    return resp.getData();
  }

  /**
   * Updates a PoP. Updates an already registered PoP.
   *
   * @param id ID of PoP (required)
   * @param body PoP object that needs to be updated. (required)
   * @return ApiResponse&lt;PoP&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the
   *     response body
   */
  public ApiResponse<PoP> updatePoPWithHttpInfo(String id, PoP body) throws ApiException {
    com.squareup.okhttp.Call call = updatePoPValidateBeforeCall(id, body, null, null);
    Type localVarReturnType = new TypeToken<PoP>() {}.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Updates a PoP. (asynchronously) Updates an already registered PoP.
   *
   * @param id ID of PoP (required)
   * @param body PoP object that needs to be updated. (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call updatePoPAsync(
      String id, PoP body, final ApiCallback<PoP> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener =
          new ProgressResponseBody.ProgressListener() {
            @Override
            public void update(long bytesRead, long contentLength, boolean done) {
              callback.onDownloadProgress(bytesRead, contentLength, done);
            }
          };

      progressRequestListener =
          new ProgressRequestBody.ProgressRequestListener() {
            @Override
            public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
              callback.onUploadProgress(bytesWritten, contentLength, done);
            }
          };
    }

    com.squareup.okhttp.Call call =
        updatePoPValidateBeforeCall(id, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<PoP>() {}.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
